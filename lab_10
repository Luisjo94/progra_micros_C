/*
 * File: lab10.c
 * Luis J. Archila
 * 18/10/2021 
 */

// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = ON      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = ON        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdint.h>

#define _XTAL_FREQ 8000000


//**** Variables ****
const char data[] = "Hola mundo :)";
const char x = 76;
int i;

//**** Prototipos ****
void    setup(void);



//**** Interrupci√≥n ****
void __interrupt() isr (void)
{
    if (PIR1bits.RCIF)
    {
        PORTB = RCREG;
    }
}


//**** Main ****
void main (void)
{
    setup();
    
    //main_loop
    while (1)
    {
        __delay_ms(300);
        //TXREG = x;
        
         while (i<14)
         {
            if (PIR1bits.TXIF)
            {
                for (i = 0; i<14; i++)
                {
                    __delay_ms(10);
                    TXREG = data[i];
                }

            }
        }
        
    }
}



//**** Funciones ****

//---- Setup ----
void setup(void)
{
    // port_conf
    ANSEL = 0;
    ANSELH = 0;
    
    TRISB = 0;
    PORTB = 0;

    
    //osc_conf
    OSCCONbits.IRCF = 0b0100; //1 MHz
    OSCCONbits.SCS = 1; 
    
    //TX y RX
    //9600 baud rate
    TXSTAbits.SYNC = 0;
    TXSTAbits.BRGH = 1;
    
    BAUDCTLbits.BRG16 = 1;
    
    SPBRG = 25;
    SPBRGH = 0;
    
    RCSTAbits.SPEN = 1;
    RCSTAbits.RX9 = 0;      //modo de 8 bits
    RCSTAbits.CREN = 1;     //habilitar la recepcion
    
    TXSTAbits.TXEN = 1;     //habilitar la transmision
    TXSTAbits.TX9 = 0;
    
    
    //interrupciones
    PIR1bits.RCIF = 0;
    PIE1bits.RCIE = 1;
    INTCONbits.PEIE = 1;
    INTCONbits.GIE = 1;
    
    return;
}
