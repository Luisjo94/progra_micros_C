/*
 * File: lab8.c
 * Luis J. Archila
 * 04/10/2021 
 */

// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdint.h>

#define _XTAL_FREQ 4000000
//**** Variables ****


//**** Prototipos ****

void    setup(void);


//**** Interrupci√≥n ****

void __interrupt() isr (void)
{
    if (PIR1bits.ADIF)
    {
        if (ADCON0bits.CHS == 6)
        {
            PORTC = ADRESH;
        }
        else
        {
            PORTD = ADRESH;
        }
        PIR1bits.ADIF = 0;
    }
}

//**** Main ****

void main (void)
{
    setup();
    ADCON0bits.GO = 1;
    
    //main_loop
    while (1)
    {
        if (ADCON0bits.GO == 0)
        {
            if (ADCON0bits.CHS == 6)
            {
                ADCON0bits.CHS = 5;
            }
            else
            {
                ADCON0bits.CHS = 6;
            }
            __delay_us(50);
            ADCON0bits.GO = 1;
        }
    }
}


//**** Funciones ****

void setup(void)
{
    // port_conf
    ANSEL = 0b01100000;
    ANSELH = 0;
    
    TRISC = 0;
    TRISD = 0;
    TRISE = 0b11;
    
    PORTC = 0;
    PORTD = 0;
    PORTE = 0;
    
    //osc_conf
    OSCCONbits.IRCF = 0b0110; //4 MHz
    OSCCONbits.SCS = 1; 
    
    /*
    //tmr0_conf
    OPTION_REGbits.T0CS = 0;
    OPTION_REGbits.T0SE = 0;
    OPTION_REGbits.PSA = 0;
    OPTION_REGbits.PS2 = 1;
    OPTION_REGbits.PS1 = 1;
    OPTION_REGbits.PS0 = 1;
    TMR0 = _tmr0_value_dis;
    
    INTCONbits.T0IF = 0;
    INTCONbits.T0IE = 1;
    */
    
    // ADC conf
    ADCON1bits.ADFM = 0;
    ADCON1bits.VCFG0 = 0;
    ADCON1bits.VCFG1 = 0;
    
    ADCON0bits.ADCS = 0b01;
    ADCON0bits.CHS = 5;     //chanel 5
    ADCON0bits.ADON = 1;
    __delay_us(50);         //tiempo para que se cargue C
    
    //interrupciones
    PIR1bits.ADIF = 0;
    PIE1bits.ADIE = 1;
    INTCONbits.PEIE = 1;
    INTCONbits.GIE = 1;
    
    return;
}
